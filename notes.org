* Plan For Application
CENTER:
- Root:
- Header:

LEFT:
- Shopping List:
- Shopping List 
- Shopping List Edit

RIGHT:
- Recipes
- Recipe Book:
- Recipe List
- Recipe Item
- Recipe Detail

MODELS:
- Component
- Feature

This also involves:
- Feature > Component > Model

* How The 'header' Component Was Created
- I created this manually as per the video within the 'src/app/header' directory

* How The 'recipes' Component Was Created 
- You can use the 'ng generate component' command, but I opted to use the alias version aka 'ng g c (name of new component)'
- I also used the '--skip-tests' parameter to prevent Angular from adding a testing file which isn't needed right now
#+BEGIN_SRC bash
ng g c recipes --skip-tests
#+END_SRC

* How The 'recipe-list' Component Was Created
- I used the following command to place the new 'recipe-list' component into the already existing 'recipes' folder:
#+BEGIN_SRC bash
ng g c recipes/recipe-list --skip-tests
#+END_SRC

* How The 'recipe-detail' Component Was Created
- I used the following command to place the new 'recipe-detail' component into the already existing 'recipes' folder:
#+BEGIN_SRC bash
ng g c recipes/recipe-detail --skip-tests
#+END_SRC

* How The 'recipe-item' Component Was Created:
- I used the following command to place the new 'recipe-item' component into the already existing 'recipes/recipe-list' folder:
#+BEGIN_SRC bash
ng g c recipes/recipe-list/recipe-item --skip-tests
#+END_SRC

* How The 'shopping-list' Component Was Created:
- I used the following command:
#+BEGIN_SRC bash
ng g c shopping-list --skip-tests
#+END_SRC

* How The 'shopping-edit' Component Was Created:
- I used the following command to place the new 'shopping-edit' component within the existing 'shopping-list' folder:
#+BEGIN_SRC bash
ng g c shopping-list/shopping-edit --skip-tests
#+END_SRC

* How Other Components Were Modified
- I basically used their corresponding child components within the related parent HTML files within most of the parent components along with Bootstrap specific styling classes

* How Bootstrap Version 3 Was Installed
- NOTE: I didn't realize that the dependence on Bootstrap Version 3 was so heavy, so I had to figure that out the hard way, but basically if you just stick with 'npm install --save bootstrap@3', you will be good to go for this course

* How A Collapsable Hamburger Menu Was Added
- I followed along with the related '51. Alternative Non-Collapsable Navigation Bar' instructions, andded the following changes in the 'src/app/header/header.component.html' file:
#+BEGIN_SRC html
<div class="navbar-header">
  <button type="button" class="navbar-toggle" (click)="collapsed = !collapsed">
	<span class="icon-bar" *ngFor="let iconBar of [1, 2, 3]"></span>
  </button>
  <a routerLink="/" class="navbar-brand">Recipe Book</a>
</div>
<div class="navbar-collapse" [class.collapse]="collapsed" (window:resize)="collapsed = true">
#+END_SRC

I then added the following to the 'src/app/header/header.component.ts' file:
#+BEGIN_SRC ts 
collapsed = true;
#+END_SRC

* How The 'recipe' Model Was Created
- I created a new model by creating a new file called 'recipe.model.ts' in the 'recipes' folder
- I then exported a Typescript class called 'Recipe' within that file 
- I then created the 'name' property and made sure it was 'public' to allow it to be available wherever this is imported
- This can be found here: 
#+BEGIN_SRC ts
export class Recipe {
    public name: string;
    public description: string;
    public imagePath: string;
#+END_SRC
- I repeated this process for the 'description' which holds the description of the recipe, and the 'imagePath' which contains the URL for the recipe image itself
- I then created the 'constructor' function which is basically run initially every time a component a class is created:
#+BEGIN_SRC ts
export class Recipe {
    public name: string;
    public description: string;
    public imagePath: string;

    constructor(name: string, desc: string, imagePath: string) {
        this.name = name;
        this.description = desc;
        this.imagePath = imagePath;
    }
}
#+END_SRC

* How The 'recipe' Model Was Added To The 'recipe-list' Component
- I specifically defined the 'recipe' model within the 'recipes' array variable in the 'recipe-list-component.ts' file, and also added the associated import statement:
#+BEGIN_SRC ts
import { Component } from '@angular/core';
import { Recipe } from '../recipe.model';

@Component({
  selector: 'app-recipe-list',
  templateUrl: './recipe-list.component.html',
  styleUrls: ['./recipe-list.component.css']
})
export class RecipeListComponent {
  recipes: Recipe[] = [];

  constructor() {}

  ngOnInit() {
  }
}
#+END_SRC
- I then created one example element in the 'Recipe[]' model array by providing strings for related parameters:
#+BEGIN_SRC ts
import { Component } from '@angular/core';
import { Recipe } from '../recipe.model';

@Component({
  selector: 'app-recipe-list',
  templateUrl: './recipe-list.component.html',
  styleUrls: ['./recipe-list.component.css']
})
export class RecipeListComponent {
  recipes: Recipe[] = [
    new Recipe('A Test Recipe', 'This is simply a test', 'https://thebrilliantkitchen.com/wp-content/uploads/2022/08/General-Tsos-chicken.jpg.webp');
  ];

  constructor() {}

  ngOnInit() {
  }
}
#+END_SRC
- I then added more Bootstrap styling within the 'recipe-list.component.html' file so that it would have a left and right section, the left being for the information for the recipe, and the right being for the image for the recipe:
#+BEGIN_SRC html
import { Component } from '@angular/core';
import { Recipe } from '../recipe.model';

@Component({
  selector: 'app-recipe-list',
  templateUrl: './recipe-list.component.html',
  styleUrls: ['./recipe-list.component.css']
})
export class RecipeListComponent {
  recipes: Recipe[] = [
    new Recipe('A Test Recipe', 'This is simply a test', 'https://thebrilliantkitchen.com/wp-content/uploads/2022/08/General-Tsos-chicken.jpg.webp')
  ];

  constructor() {}

  ngOnInit() {
  }
}
#+END_SRC

* How I Was Able To Add Recipes Dynamically With '*ngFor' Directive
- I added the '*ngFor' directive inside the 'recipe-list.component.html' file to access the Recipe model contents from the 'recipe-list.component.ts' file.
- I then used string interpolation via '{{}}' for the 'recipe.name' and 'recipe.description' properties of the 'Recipe' model
- I also used data binding for the 'src' property accordingly to allow for a two-way street style communication when this is assigned
#+BEGIN_SRC html
<div class="row">
    <div class="col-xs-12">
        <div class="btn btn-success">New Recipe</div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-xs-12">
        <a 
            href="#" 
            class="list-group-item clearfix" 
            *ngFor="let recipe of recipes"
        >
            <div class="pull-left">
                <h4 class="list-group-item-heading">{{ recipe.name }}</h4>
                <p class="list-group-item-text">{{ recipe.description }}</p>
            </div>
            <span class="pull-right">
                <img 
                    [src]="recipe.imagePath"
                    alt="{{ recipe.name }}" 
                    class="img-responsive" 
                    style="max-height: 50px;"
                >
            </span>
        </a>
        <app-recipe-item></app-recipe-item>
    </div>
</div>
#+END_SRC